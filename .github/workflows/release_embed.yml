name: Release with Embedded Frontend

on:
  push:
    tags:
      - "v*" # 触发条件：打 Tag，比如 v1.0.0

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Frontend & Backend
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          # - goos: windows
          #   goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Frontend Build Steps ---
      - name: Setup Node.js Environment
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: "pnpm"
          cache-dependency-path: "web/pnpm-lock.yaml"
      - name: Install dependencies and build frontend
        working-directory: ./web
        run: pnpm install --frozen-lockfile && pnpm build --mode production

      # --- Backend Build Steps ---
      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"
          cache-dependency-path: "**/go.sum"
      - name: Set Go proxy
        run: go env -w GOPROXY=https://proxy.golang.org,direct

      - name: Setup Musl for ARM64 Cross-compilation
        if: matrix.goarch == 'arm64'
        run: |
          wget -q https://github.com/lin-snow/musl-compilers/releases/download/2025-6-20/aarch64-linux-musl-cross.tgz
          tar -xf aarch64-linux-musl-cross.tgz
          echo "$(pwd)/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

      - name: Install mingw-w64 for Windows cross-compiling
        if: matrix.goos == 'windows'
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Build backend binary with embedded frontend
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          # Dynamically set the C compiler based on the architecture
          CC: ${{ matrix.goos == 'windows' && 'x86_64-w64-mingw32-gcc' || (matrix.goarch == 'arm64' && 'aarch64-linux-musl-gcc' || 'gcc') }}
        run: |
          # Define linker flags for a static build
          STATIC_LDFLAGS="-linkmode external -extldflags '-static'"
          OUTPUT_NAME="ech0-${{ matrix.goos }}-${{ matrix.goarch }}"
          # 如果是 Windows 平台，给输出文件名加上 .exe 后缀
          if [ "${{ matrix.goos }}" == "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi

          # Build the binary. Go's 'embed' will automatically find the frontend
          # files built in the previous steps.
          go build -tags netgo -ldflags "$STATIC_LDFLAGS" -o "${OUTPUT_NAME}" ./main.go

      - name: List output files
        run: ls -lh .

      # --- Artifact Packaging and Uploading ---
      - name: Package binary
        if: matrix.goos != 'windows'
        run: tar -czvf "ech0-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" "ech0-${{ matrix.goos }}-${{ matrix.goarch }}"

      - name: Upload artifact (Linux/macOS)
        if: matrix.goos != 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ech0-${{ matrix.goos }}-${{ matrix.goarch }}-asset
          path: ech0-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          retention-days: 1

      - name: Upload artifact (Windows)
        if: matrix.goos == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ech0-${{ matrix.goos }}-${{ matrix.goarch }}-asset
          path: ech0-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          retention-days: 1

  prepare-release:
    name: Prepare Release Package
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ech0-*
          path: ./backend-artifacts
          merge-multiple: true

      - name: Extract backend binaries
        run: |
          mkdir -p dist
          find ./backend-artifacts -name "*.tar.gz" -exec tar -xzvf {} -C dist/ \;

      # ✅ 创建 GitHub Release
      # 暂时忽略 ./backend-artifacts/*.exe
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./backend-artifacts/*.tar.gz
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 🔄 Checkout source code
        uses: actions/checkout@v4

      - name: 📦 Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ech0-* # 下载后端构建产物得到 ech0-*.tar.gz
          path: ./backend-artifacts

      - name: 🐳 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: 🐳 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 📦 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 📦 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📦 Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ech0:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/ech0:latest
            docker.io/${{ vars.DOCKERHUB_USERNAME }}/ech0:${{ github.ref_name }}
            docker.io/${{ vars.DOCKERHUB_USERNAME }}/ech0:latest
